{"version":3,"sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/Feedback/Feedback.styled.jsx","components/Feedback/Feedback.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","components/App/App.jsx","index.js"],"names":["CustomContainer","styled","div","Container","children","CustomButton","button","Feedback","options","onAddFeedback","Object","keys","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","countReducer","prevState","nextState","App","useReducer","setGood","setNeutral","setBad","countTotalFeedback","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAEaA,EAAkBC,IAAOC,IAAV,4E,OCAfC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,OAAO,cAACJ,EAAD,UAAkBI,KCDdC,EAAeJ,IAAOK,OAAV,mDCCZC,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cAClC,OACE,gCACE,uDACCC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAM,OAC9B,cAACR,EAAD,CAEES,KAAK,SACLC,KAAMF,EACNG,QAAS,kBAAMP,EAAcI,IAJ/B,SAMGA,GALIA,UCPFI,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,gCACE,4CACA,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCdOC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCGb,SAASC,EAAaC,EAAWC,GAC/B,OAAOD,EAAYC,EAGN,SAASC,IACtB,MAAwBC,qBAAWJ,EAAc,GAAjD,mBAAOP,EAAP,KAAaY,EAAb,KACA,EAA8BD,qBAAWJ,EAAc,GAAvD,mBAAON,EAAP,KAAgBY,EAAhB,KACA,EAAsBF,qBAAWJ,EAAc,GAA/C,mBAAOL,EAAP,KAAYY,EAAZ,KAqBMC,EAAqB,WACzB,OAAOf,EAAOC,EAAUC,GAQxB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEZ,QAAS,CAAEU,OAAMC,UAASC,OAC1BX,cAhCY,SAACK,GACnB,OAAQA,GACN,IAAK,OACHgB,EAAQ,GACR,MAEF,IAAK,UACHC,EAAW,GACX,MAEF,IAAK,MACHC,EAAO,GACP,MAEF,QACE,WAmBCC,IACC,8BACE,cAAC,EAAD,CACEf,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOY,IACPX,mBAjBFY,KAAKC,MAAOjB,EAAOe,IAAwB,SAqB3C,cAAC,EAAD,CAAcT,QAAQ,yBCvDlCY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACV,EAAD,MAEFW,SAASC,eAAe,W","file":"static/js/main.ee17915c.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const CustomContainer = styled.div`\n  background-color: #e12363;\n  padding: 10px;\n`;\n","import { CustomContainer } from './Container.styled';\n\nexport const Container = ({ children }) => {\n  return <CustomContainer>{children}</CustomContainer>;\n};\n","import styled from '@emotion/styled';\n\nexport const CustomButton = styled.button`\n  margin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { CustomButton } from './Feedback.styled';\n\nexport const Feedback = ({ options, onAddFeedback }) => {\n  return (\n    <div>\n      <h2>Please leave feedback</h2>\n      {Object.keys(options).map(option => (\n        <CustomButton\n          key={option}\n          type=\"button\"\n          name={option}\n          onClick={() => onAddFeedback(option)}\n        >\n          {option}\n        </CustomButton>\n      ))}\n    </div>\n  );\n};\n\nFeedback.propTypes = {\n  options: PropTypes.object.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) => {\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage} %</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import {  useReducer} from 'react'\nimport { Container } from '../Container/Container';\nimport { Feedback } from '../Feedback/Feedback';\nimport { Statistics } from '../Statistics/Statistics';\nimport { Notification } from '../Notification/Notification';\n\nfunction countReducer(prevState, nextState) {\n  return prevState + nextState;\n }\n\nexport default function App() { \n  const [good, setGood] = useReducer(countReducer, 0);\n  const [neutral, setNeutral] = useReducer(countReducer, 0);\n  const [bad, setBad] = useReducer(countReducer, 0);\n\n  const addFeedback = (type) => {\n    switch (type) {\n      case 'good':\n        setGood(1)\n        break\n\n      case 'neutral':\n        setNeutral(1)\n        break\n\n      case 'bad':\n        setBad(1)\n        break\n\n      default:\n        return\n    }\n  }\n\n  const countTotalFeedback = () => { \n    return good + neutral + bad;\n  }\n\n  const countPositiveFeedbackPercentage = () => { \n    return  Math.round((good / countTotalFeedback()) * 100)\n\n  }\n\n    return (\n      <Container>\n        <Feedback\n          options={{ good, neutral, bad}}\n          onAddFeedback={addFeedback}\n        />\n        {countTotalFeedback() ? (\n          <div>\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          </div>\n        ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n      </Container>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}